## start {{ .Server.HostName }}
{{ if gt (len .Server.Paths) 0 }}
{{ range $backend := .Server.Paths }}
upstream {{ $backend.Name }} {
    server {{ $backend.Name }}.{{ $backend.NameSpace }}.svc:{{ $backend.Port }};
}
{{end}}
{{end}}

server {
    server_name {{ .Server.HostName }};
    listen       80;
    listen  [::]:80;
    listen       443 http2;
    listen  [::]:443 http2;

    {{ if .Server.Tls.TlsNoPass }}
    ssl_certificate {{ .Server.Tls.TlsCrt }};
    ssl_certificate_key {{ .Server.Tls.TlsKey }};
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_timeout 10m;
    ssl_session_cache builtin:1000 shared:SSL:10m;
    ssl_buffer_size 1400;
    add_header Strict-Transport-Security max-age=15768000;
    {{ if .Annotations.SSLStapling.SSlStapling }}
    ssl_stapling on;
    {{ end }}
    {{ if .Annotations.SSLStapling.SSllStaplingVerify }}
    ssl_stapling_verify on;
    {{ end }}
    {{ end }}

    {{ if gt (len .Annotations.AllowList.CIDR) 0 }}
    {{ range $ip := .Annotations.AllowList.CIDR }}
    allow {{ $ip }};{{ end }}
    deny all;
    {{ end }}

    {{ if gt (len .Annotations.DenyList.CIDR) 0 }}
    {{ range $ip := .Annotations.DenyList.CIDR }}
    deny {{ $ip }};{{ end }}
    allow all;
    {{ end }}

    # allow cos
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,xfilecategory,xfilename,xfilesize';
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    if ($request_method = 'OPTIONS') {
        return 204;
    }

    #### proxy
    location {{ .Annotations.Proxy.ProxyPath }} {
    	{{ if ne .Annotations.Proxy.ProxyTarget "" }}
    	rewrite ^{{ .Annotations.Proxy.ProxyTargetPath }} {{ .Annotations.Proxy.ProxyTarget }} break;
    	{{ end }}
    	set $best_http_host      $http_host;
        set $pass_server_port    $server_port;
        set $pass_port           $pass_server_port;
        set $pass_access_scheme  $scheme;

        # Allow websocket connections
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #proxy_set_header X-Real-IP              $remote_addr;
        proxy_set_header X-Forwarded-For        $remote_addr;
        proxy_set_header X-Forwarded-Host       $best_http_host;
        proxy_set_header X-Forwarded-Port       $pass_port;
        proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
        proxy_set_header X-Forwarded-Scheme     $pass_access_scheme;
        proxy_set_header X-Scheme               $pass_access_scheme;
        # Pass the original X-Forwarded-For
        proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;

        # Custom headers to proxied server

        proxy_connect_timeout                   5s;
        proxy_send_timeout                      60s;
        proxy_read_timeout                      60s;

        proxy_buffering                         off;
        proxy_buffer_size                       4k;
        proxy_buffers                           4 4k;

        proxy_max_temp_file_size                1024m;

        proxy_request_buffering                 on;
        proxy_http_version                      1.1;

        proxy_cookie_domain                     off;
        proxy_cookie_path                       off;

        # In case of errors try the next upstream server before returning an error
        proxy_next_upstream                     error timeout;
        proxy_next_upstream_timeout             0;
        proxy_next_upstream_tries               3;
    	{{ if .Annotations.Proxy.ProxySSL }}
    	proxy_pass https://{{ .Annotations.Proxy.ProxyHost }};
    	{{ else }}
    	proxy_pass http://{{ .Annotations.Proxy.ProxyHost }};
    	{{end}}
    	proxy_redirect                         off;
    }

    #### backend
    {{ if gt (len .Server.Paths) 0 }}
    {{ range $backend := .Server.Paths }}
     location {{ $backend.Path }} {
        {{ if ne .Annotations.Rewrite.RewriteTarget  "" }}
        rewrite ^{{ $backend.TargetPath }} {{ .Annotations.Rewrite.RewriteTarget }} break;
        {{ end }}
        set $best_http_host      $http_host;
        set $pass_server_port    $server_port;
        set $pass_port           $pass_server_port;
        set $pass_access_scheme  $scheme;

        # Allow websocket connections
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #proxy_set_header X-Real-IP              $remote_addr;
        proxy_set_header X-Forwarded-For        $remote_addr;
        proxy_set_header X-Forwarded-Host       $best_http_host;
        proxy_set_header X-Forwarded-Port       $pass_port;
        proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
        proxy_set_header X-Forwarded-Scheme     $pass_access_scheme;
        proxy_set_header X-Scheme               $pass_access_scheme;
        # Pass the original X-Forwarded-For
        proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;

        # Custom headers to proxied server

        proxy_connect_timeout                   5s;
        proxy_send_timeout                      60s;
        proxy_read_timeout                      60s;

        proxy_buffering                         off;
        proxy_buffer_size                       4k;
        proxy_buffers                           4 4k;

        proxy_max_temp_file_size                1024m;

        proxy_request_buffering                 on;
        proxy_http_version                      1.1;

        proxy_cookie_domain                     off;
        proxy_cookie_path                       off;

        # In case of errors try the next upstream server before returning an error
        proxy_next_upstream                     error timeout;
        proxy_next_upstream_timeout             0;
        proxy_next_upstream_tries               3;
        proxy_pass http://{{ $backend.Name }};
        proxy_redirect                         off;
    }
    {{ end }}
    {{ end }}
}
## end {{ .Server.HostName }}
